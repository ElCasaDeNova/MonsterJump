//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""BasicActionMap"",
            ""id"": ""abd2f3bc-4e88-4aed-9d4e-6e3b2ccb463e"",
            ""actions"": [
                {
                    ""name"": ""Motion"",
                    ""type"": ""Value"",
                    ""id"": ""979e0aee-5058-43bc-a0cf-8bb31d84c2e7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""6232e902-c248-43f0-9b05-cda9c2691ad8"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Motion"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5229e1e0-dae1-4bc1-9ea3-d4b4416f83fc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BasicControl"",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""edf2afb1-93e4-422b-837c-43e1d26419d4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BasicControl"",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ab062b93-1623-43b6-97ba-0972832b9983"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BasicControl"",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8b04ac87-4fb9-4a6d-931b-6885b206fff2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BasicControl"",
                    ""action"": ""Motion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""BasicControl"",
            ""bindingGroup"": ""BasicControl"",
            ""devices"": []
        }
    ]
}");
        // BasicActionMap
        m_BasicActionMap = asset.FindActionMap("BasicActionMap", throwIfNotFound: true);
        m_BasicActionMap_Motion = m_BasicActionMap.FindAction("Motion", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BasicActionMap
    private readonly InputActionMap m_BasicActionMap;
    private List<IBasicActionMapActions> m_BasicActionMapActionsCallbackInterfaces = new List<IBasicActionMapActions>();
    private readonly InputAction m_BasicActionMap_Motion;
    public struct BasicActionMapActions
    {
        private @Controls m_Wrapper;
        public BasicActionMapActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Motion => m_Wrapper.m_BasicActionMap_Motion;
        public InputActionMap Get() { return m_Wrapper.m_BasicActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BasicActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IBasicActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_BasicActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BasicActionMapActionsCallbackInterfaces.Add(instance);
            @Motion.started += instance.OnMotion;
            @Motion.performed += instance.OnMotion;
            @Motion.canceled += instance.OnMotion;
        }

        private void UnregisterCallbacks(IBasicActionMapActions instance)
        {
            @Motion.started -= instance.OnMotion;
            @Motion.performed -= instance.OnMotion;
            @Motion.canceled -= instance.OnMotion;
        }

        public void RemoveCallbacks(IBasicActionMapActions instance)
        {
            if (m_Wrapper.m_BasicActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBasicActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_BasicActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BasicActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BasicActionMapActions @BasicActionMap => new BasicActionMapActions(this);
    private int m_BasicControlSchemeIndex = -1;
    public InputControlScheme BasicControlScheme
    {
        get
        {
            if (m_BasicControlSchemeIndex == -1) m_BasicControlSchemeIndex = asset.FindControlSchemeIndex("BasicControl");
            return asset.controlSchemes[m_BasicControlSchemeIndex];
        }
    }
    public interface IBasicActionMapActions
    {
        void OnMotion(InputAction.CallbackContext context);
    }
}
